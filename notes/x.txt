# Manim を使うまでの道のりの記録.


## 2021/05/20

つかっているのはdebian 10.
pip3とかはすでに入っているので, それを使ってまずはインストールしたい.


(あとから考えると, 無駄な作業)
とりあえず, 以下を叩いた.
```
pip3  install --user manimlib
```
 argparse, colour, numpy, opencv-python, progressbar, pydub, scipy, tqdm, manimlib がインストールされた.
opencv のインストール/コンパイルに時間がかかっているようで数時間かかったが謎.

とりあえず, 検索して引っかかったページ [1] には,
`cairo`, `ffmpeg`, `sox`, あとオプションで `latex` をいれとけと書いてあるように見える.
ffmpegは普段使っているので多分すでに入っている, latexも同様.
cairoとsoxはわからんので放置.

 [1] https://pypi.org/project/manimlib/


(あとから考えると, ここからで良かった気がする..)
しかし, [1] をよく見るとバージョンが 0.2.0 で [2] の方が新しいので以下を叩いた:
```
pip3  install --user manim
```

[2] https://pypi.org/project/manim/
 

`pangocairo >= 1.30.0 is required` と怒られてインストール失敗.
`apt-get install libpangocairo`するものの
`libpangocairo-1.0-0 はすでに最新バージョン (1.42.4-8~deb10u1) です。`
とのこと.
`apt-get install libpango1.0-dev`してみる.


`rich 6.2.0 has requirement pygments<3.0.0,>=2.6.0, but you'll have pygments 2.3.1 which is incompatible.`
と言われる.
`pip3 install --user pygments==2.6.0`

`RuntimeError: CMake must be installed to build the following extensions: mapbox_earcut`
と言われるので,
`apt-get install cmake`


`--user`をつけたせいで, パスが通ったところには, `manim` というコマンドは見当たらない.
`~/.local/bin/manim`はあった.


とりあえず, コマンドはあるので, ちゃんと使えるのかを検証するために, サンプルが欲しいが , [2] を見て USAGE のところをやることにする.

`test/20200520`で`example.py` を作成.
次を叩くと動画が再生された.
```
~/.local/bin/manim -p -ql example.py SquareToCircle
```
このコマンドにより, `media/videos/example/480p15/SquareToCircle.mp4` が生成されていた.


とりあえず動いたようなのでひとまず終わり.




## 2021/05/21

昨日のソースを, `test/20210521`にコピーし, 本格的にいじっていくことにする.
まず, とりあえず, 名前空間を理解するために,
`from manim import *` をやめ
`import manim` にし, すべて`manim`からのフルパスで書くことにする.
結構深い.
[05017089e3f4fd42d79228bf4c5624a9c0231880]


叩くコマンドから `-p` を除くと自動再生はしないようだ.
```
~/.local/bin/manim -ql example.py SquareToCircle
```

` module_ops.py:85 Squa is not in the script`
というエラーが出ているがこれはたぶん自分のミスではなさそうなので放置.


`self.play(manim.animation.creation.Create(square))`
のかわりに,
`self.add(square)`
をおくと, いきなり四角形が置かれる.
```
~/.local/bin/manim -ql example.py PutSquareToCircle
```


## 2021/05/23

少しだけ詳しく追うことにする.


### 使い方の概要

manimで動画を作るにはだいたい次の手順を踏めばよいということなのだろう:
動画のためのファルをつくる.  例えば,
```
example.py
```
とかを用意する.

そのファイルでは, まずライブラリのインポート.
```
import manim
```

`manim.scene.scene.Scene`
を拡張したクラスを用意し,
`construct(self)` 
を実装.
`construct`に動画のシナリオを書いていく.
基本的には,
`manim.mobject.`にあるクラスが図形で
そのインスタンスを要しておく.
その上で, `self.add` とか `self.play` などとやって,
動画に追加していくという形のようだ.
例えば,
```
class MyScene(manim.scene.scene.Scene):
    def construct(self):
        circle = manim.mobject.geometry.Circle()
        self.add(circle)
        self.wait()
```

`example.py` にある `MyScene` というクラスの動画を実際に作るには,
次の様にやると, 動画がコンパイルされる.
```
~/.local/bin/manim -ql example.py MyScene
```
`-ql`は低画質を意味するオプション.
出来上がるファイルは,
`media/videos/example/480p15/`
みたいなところ.

単に, `add`しただけだと, 
アニメーションはないので (0秒の動画), 動画は作られない.
`png`ファイルは作成されている.
固定画像の動画にするなら, `self.wait()` とでもして,
待ち時間を設ける必要がある.


アニメーションを行うには,
`manim.animation.`にあるものを使い`self.play`する.
例えば,
フェードインが定義されているのは
`manim.animation.fading.FadeIn`
である.
`circle = manim.mobject.geometry.Circle()`
として作った円をフェードインするには,
次の様にやる:
```
fadeinanimation=manim.animation.fading.FadeIn(circle)
self.play(fadeinanimation)
```


あとは, 次のうち基本的なものをいくつか知っていれば十分使えそうである:
* `manim.mobject` にある図形 (`manim.mobject.geometry`に基本的な図形がある)
* 図形の変更方法.
* `manim.animation.` にあるアニメーションの種類.
* 色の指定.
この辺は, 割と直感的な名前がついているので, [3] あたりを必要に応じて読むのが,
効率的な気がする.

 [3] https://docs.manim.community/en/stable/reference.html



* `manim.mobject.geometry.Circle()` は円.
* `manim.mobject.geometry.RegularPolygon()` は多角形.

図形は作成時に座標などを指定できるのかもしれないが,
よくわからなかった.
一旦作った後に,
図形のクラスが持っている,
`.rotate()`,
`.rotate_about_origin()`,
`.shift()`,
`.scale()`
などで変形や移動をして使えばよい.
これらは, アニメーションになるわけではない.
基本的に,
角度などは `manim.constants.`にある定数を使う.
* 円周率: `manim.constants.PI`
* 円周率の二倍: `manim.constants.TAU`
などがある.


図形をグループ化するなら,
`manim.mobject.types.vectorized_mobject.VGroup`
を使う.
`manim.mobject.types.vectorized_mobject.VGroup(circle,polygon1,polygon2)`
のように可変個数引数として図形を与えれば良い.
可変引数なので, もし, リストとして図形を持っているなら次のように行う:
```
li = circle,polygon1,polygon2
manim.mobject.types.vectorized_mobject.VGroup(*li)
```

色については, 図形オブジェクトを作る際に,
`color`というキーワード引数を使えば良い.
作ったあとなら, `.set_color()`で色を変更できる.
色の指定には,
定数を使ってもよいが, `'#123456'`みたに文字列で与えてもよい.
アルファ値は指定しても無視される様に思える.
`opacity`を設定すれば良いみたいだが, むちゃくちゃ重くなる.


アニメーションは例えば以下のものがある:
* `manim.animation.creation.Create()` 
* `manim.animation.fading.FadeIn()`
* `manim.animation.fading.FadeOut()`
* `manim.animation.transform.Transform()`



